
// Code generated by sqlc. DO NOT EDIT.
// version: sqlc v1.18.0

namespace PAuthors

open System
open Fumble
open PAuthors.Readers

module Sql = Sqlite
type Sql = Sqlite

module Sqls = 

  [<Literal>]
  let deleteAuthor =
    """
    ;

DELETE FROM authors
WHERE id = @id
  """

  [<Literal>]
  let insertAuthor =
    """
    ;

INSERT INTO authors
( 
    name
 ,  bio
 ,  address
 ,  date_of_birth
 ,  last_ts
 ,  savings_amt
 ,  loan_amt
 ,  disabled
 ,  married
 ,  payable
) VALUES (
    @name
 ,  @bio
 ,  @address
 ,  @date_of_birth
 ,  @last_ts
 ,  @savings_amt
 ,  @loan_amt
 ,  @disabled
 ,  @married
 ,  @payable
)
RETURNING id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable
  """

  [<Literal>]
  let listAuthor =
    """
    ;

SELECT id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable FROM authors
WHERE id > @id
ORDER BY id
LIMIT 1000
  """

  [<Literal>]
  let selectAuthor =
    """
    SELECT
    id
 ,  name
 ,  bio
 ,  address
 ,  date_of_birth
 ,  last_ts
 ,  savings_amt
 ,  loan_amt
 ,  disabled
 ,  married
 ,  payable
FROM authors
WHERE id = @id
  """

  [<Literal>]
  let updateAuthor =
    """
    ;

UPDATE authors
SET 
    name = @name
 ,  bio = @bio
 ,  address = @address
 ,  date_of_birth = @date_of_birth
 ,  last_ts = @last_ts
 ,  savings_amt = @savings_amt
 ,  loan_amt = @loan_amt
 ,  disabled = @disabled
 ,  married = @married
 ,  payable = @payable
WHERE id = @id
RETURNING id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable
  """

[<RequireQualifiedAccessAttribute>]
type DB (conn: string) =
  // https://www.connectionstrings.com/sqlite-net-provider

  /// Delete one Author using id
  member this.deleteAuthor  (id: int) =

    let parameters = [ ("id", Sql.int id) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.deleteAuthor
    |> Sql.parameters parameters
    |> Sql.executeNonQuery

  /// Insert one row of Author
  member this.insertAuthor  (name: string, ?bio: string, ?address: string, ?dateOfBirth: DateTime, ?lastTs: DateTimeOffset, ?savingsAmt: double, ?loanAmt: decimal, ?disabled: bool, ?married: bool, ?payable: decimal) =

    let parameters = [ ("name", Sql.string name); ("bio", Sql.stringOrNone bio); ("address", Sql.stringOrNone address); ("date_of_birth", Sql.dateTimeOrNone dateOfBirth); ("last_ts", Sql.dateTimeOffsetOrNone lastTs); ("savings_amt", Sql.doubleOrNone savingsAmt); ("loan_amt", Sql.decimalOrNone loanAmt); ("disabled", Sql.boolOrNone disabled); ("married", Sql.boolOrNone married); ("payable", Sql.decimalOrNone payable) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.insertAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

  /// Lists 1000 Author having id > @id
  member this.listAuthor  (id: int) =

    let parameters = [ ("id", Sql.int id) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.listAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

  /// Select one Author using id
  member this.selectAuthor  (id: int) =

    let parameters = [ ("id", Sql.int id) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.selectAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

  /// Update one row of Author using id
  member this.updateAuthor  (name: string, id: int, ?bio: string, ?address: string, ?dateOfBirth: DateTime, ?lastTs: DateTimeOffset, ?savingsAmt: double, ?loanAmt: decimal, ?disabled: bool, ?married: bool, ?payable: decimal) =

    let parameters = [ ("name", Sql.string name); ("bio", Sql.stringOrNone bio); ("address", Sql.stringOrNone address); ("date_of_birth", Sql.dateTimeOrNone dateOfBirth); ("last_ts", Sql.dateTimeOffsetOrNone lastTs); ("savings_amt", Sql.doubleOrNone savingsAmt); ("loan_amt", Sql.decimalOrNone loanAmt); ("disabled", Sql.boolOrNone disabled); ("married", Sql.boolOrNone married); ("payable", Sql.decimalOrNone payable); ("id", Sql.int id) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.updateAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

