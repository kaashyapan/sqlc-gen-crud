// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package com.example.authors

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.util.UUID

const val countAuthor = """-- name: countAuthor :one
SELECT count(*) as author_count from authors
"""

const val countBook = """-- name: countBook :one
SELECT count(*) as book_count from books
"""

const val deleteAuthor = """-- name: deleteAuthor :exec
DELETE FROM authors
WHERE author_id = ?
"""

const val deleteBook = """-- name: deleteBook :exec
DELETE FROM books
WHERE book_id = ?
"""

const val insertAuthor = """-- name: insertAuthor :one
INSERT INTO authors
( 
    ssid
 ,  name
 ,  spouses
 ,  children
 ,  bio
 ,  acct
) VALUES (
    ?
 ,  ?
 ,  ?
 ,  ?
 ,  ?
 ,  ?
)
RETURNING author_id, ssid, name, spouses, children, bio, acct
"""

const val insertBook = """-- name: insertBook :one
INSERT INTO books
( 
    name
) VALUES (
    ?
)
RETURNING book_id, name
"""

const val listAuthor = """-- name: listAuthor :many
SELECT author_id, ssid, name, spouses, children, bio, acct FROM authors
WHERE author_id > ?
ORDER BY author_id
LIMIT 1000
"""

const val listBook = """-- name: listBook :many
SELECT book_id, name FROM books
ORDER BY book_id
"""

const val selectAuthor = """-- name: selectAuthor :one
SELECT
    author_id
 ,  ssid
 ,  name
 ,  spouses
 ,  children
 ,  bio
 ,  acct
FROM authors
WHERE author_id = ?
"""

const val selectBook = """-- name: selectBook :one
SELECT
    book_id
 ,  name
FROM books
WHERE book_id = ?
"""

const val updateAuthor = """-- name: updateAuthor :one
UPDATE authors
SET 
    ssid = ?
 ,  name = ?
 ,  spouses = ?
 ,  children = ?
 ,  bio = ?
 ,  acct = ?
WHERE author_id = ?
RETURNING author_id, ssid, name, spouses, children, bio, acct
"""

const val updateBook = """-- name: updateBook :one
UPDATE books
SET 
    name = ?
WHERE book_id = ?
RETURNING book_id, name
"""

class QueriesImpl(private val conn: Connection) : Queries {

// Count # of Author

  @Throws(SQLException::class)
  override fun countAuthor(): Long? {
    return conn.prepareStatement(countAuthor).use { stmt ->
      
      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = results.getLong(1)
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Count # of Book

  @Throws(SQLException::class)
  override fun countBook(): Long? {
    return conn.prepareStatement(countBook).use { stmt ->
      
      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = results.getLong(1)
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Delete one Author using author_id

  @Throws(SQLException::class)
  override fun deleteAuthor(authorId: Long) {
    conn.prepareStatement(deleteAuthor).use { stmt ->
      stmt.setLong(1, authorId)

      stmt.execute()
    }
  }

// Delete one Book using book_id

  @Throws(SQLException::class)
  override fun deleteBook(bookId: UUID) {
    conn.prepareStatement(deleteBook).use { stmt ->
      stmt.setObject(1, bookId)

      stmt.execute()
    }
  }

// Insert one row of Author

  @Throws(SQLException::class)
  override fun insertAuthor(
      ssid: Int?,
      name: String,
      spouses: Int?,
      children: Int?,
      bio: String,
      acct: java.math.BigDecimal?): Author? {
    return conn.prepareStatement(insertAuthor).use { stmt ->
      stmt.setInt(1, ssid)
          stmt.setString(2, name)
          stmt.setInt(3, spouses)
          stmt.setInt(4, children)
          stmt.setString(5, bio)
          stmt.setjava.math.BigDecimal(6, acct)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Author(
                results.getLong(1),
                results.getInt(2),
                results.getString(3),
                results.getInt(4),
                results.getInt(5),
                results.getString(6),
                results.getjava.math.BigDecimal(7)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Insert one row of Book

  @Throws(SQLException::class)
  override fun insertBook(name: String): Book? {
    return conn.prepareStatement(insertBook).use { stmt ->
      stmt.setString(1, name)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Book(
                results.getObject(1) as UUID,
                results.getString(2)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Lists 1000 Author having id > @author_id

  @Throws(SQLException::class)
  override fun listAuthor(authorId: Long): List<Author> {
    return conn.prepareStatement(listAuthor).use { stmt ->
      stmt.setLong(1, authorId)

      val results = stmt.executeQuery()
      val ret = mutableListOf<Author>()
      while (results.next()) {
          ret.add(Author(
                results.getLong(1),
                results.getInt(2),
                results.getString(3),
                results.getInt(4),
                results.getInt(5),
                results.getString(6),
                results.getjava.math.BigDecimal(7)
            ))
      }
      ret
    }
  }

// Lists all Book 

  @Throws(SQLException::class)
  override fun listBook(): List<Book> {
    return conn.prepareStatement(listBook).use { stmt ->
      
      val results = stmt.executeQuery()
      val ret = mutableListOf<Book>()
      while (results.next()) {
          ret.add(Book(
                results.getObject(1) as UUID,
                results.getString(2)
            ))
      }
      ret
    }
  }

// Select one Author using author_id

  @Throws(SQLException::class)
  override fun selectAuthor(authorId: Long): Author? {
    return conn.prepareStatement(selectAuthor).use { stmt ->
      stmt.setLong(1, authorId)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Author(
                results.getLong(1),
                results.getInt(2),
                results.getString(3),
                results.getInt(4),
                results.getInt(5),
                results.getString(6),
                results.getjava.math.BigDecimal(7)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Select one Book using book_id

  @Throws(SQLException::class)
  override fun selectBook(bookId: UUID): Book? {
    return conn.prepareStatement(selectBook).use { stmt ->
      stmt.setObject(1, bookId)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Book(
                results.getObject(1) as UUID,
                results.getString(2)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Update one row of Author using author_id

  @Throws(SQLException::class)
  override fun updateAuthor(
      ssid: Int?,
      name: String,
      spouses: Int?,
      children: Int?,
      bio: String,
      acct: java.math.BigDecimal?,
      authorId: Long): Author? {
    return conn.prepareStatement(updateAuthor).use { stmt ->
      stmt.setInt(1, ssid)
          stmt.setString(2, name)
          stmt.setInt(3, spouses)
          stmt.setInt(4, children)
          stmt.setString(5, bio)
          stmt.setjava.math.BigDecimal(6, acct)
          stmt.setLong(7, authorId)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Author(
                results.getLong(1),
                results.getInt(2),
                results.getString(3),
                results.getInt(4),
                results.getInt(5),
                results.getString(6),
                results.getjava.math.BigDecimal(7)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

// Update one row of Book using book_id

  @Throws(SQLException::class)
  override fun updateBook(name: String, bookId: UUID): Book? {
    return conn.prepareStatement(updateBook).use { stmt ->
      stmt.setString(1, name)
          stmt.setObject(2, bookId)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Book(
                results.getObject(1) as UUID,
                results.getString(2)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

}

